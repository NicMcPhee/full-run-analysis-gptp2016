
@Article{spector:2002:GPEM,
	author =       "Lee Spector and Alan Robinson",
	title =        "Genetic Programming and Autoconstructive Evolution
	with the Push Programming Language",
	journal =      "Genetic Programming and Evolvable Machines",
	year =         "2002",
	volume =       "3",
	number =       "1",
	pages =        "7--40",
	month =        mar,
	keywords =     "genetic algorithms, genetic programming, artificial
	life, modularity, programming languages,
	self-adaptation",
	ISSN =         "1389-2576",
	URL =          "http://hampshire.edu/lspector/pubs/push-gpem-final.pdf",
	doi =          "doi:10.1023/A:1014538503543",
	abstract =     "Push is a programming language designed for the
	expression of evolving programs within an evolutionary
	computation system. This article describes Push and
	illustrates some of the opportunities that it presents
	for evolutionary computation. Two evolutionary
	computation systems, PushGP and Pushpop, are described
	in detail. PushGP is a genetic programming system that
	evolves Push programs to solve computational problems.
	Pushpop, an ?autoconstructive evolution? system, also
	evolves Push programs but does so while simultaneously
	evolving its own evolutionary mechanisms.",
	notes =        "Article ID: 395988",
}

@InProceedings{1068292,
	author =       "Lee Spector and Jon Klein and Maarten Keijzer",
	title =        "The {Push3} execution stack and the evolution of
	control",
	booktitle =    "{GECCO 2005}: Proceedings of the 2005 conference on
	Genetic and evolutionary computation",
	year =         "2005",
	ISBN =         "1-59593-010-8",
	pages =        "1689--1696",
	address =      "Washington DC, USA",
	URL =          "http://www.cs.bham.ac.uk/~wbl/biblio/gecco2005/docs/p1689.pdf",
	doi =          "doi:10.1145/1068009.1068292",
	publisher =    "ACM Press",
	publisher_address = "New York, NY, 10286-1405, USA",
	organisation = "ACM SIGEVO (formerly ISGEC)",
	keywords =     "genetic algorithms, genetic programming, combinators,
	experimentation, exponentiation, factorial, Fibonacci
	sequence, iteration, languages, parity, push,
	recursion, reversing a list, sorting, stack-based
	genetic programming",
	abstract =     "One of Push's attractive features in this context is
	its transparent support for the expression and
	evolution of modular architectures and complex control
	structures, achieved through explicit code
	self-manipulation. The latest version of Push, Push3,
	enhances this feature by permitting explicit
	manipulation of an execution stack that contains the
	expressions that are queued for execution in the
	interpreter. presents a series of examples in which
	Push3 was used with a simple genetic programming system
	(PushGP) to evolve programs with non-trivial control
	structures.",
	notes =        "GECCO-2005 A joint meeting of the fourteenth
	international conference on genetic algorithms
	(ICGA-2005) and the tenth annual genetic programming
	conference (GP-2005).
	
	ACM Order Number 910052
	
	Cited by \cite{eurogp06:AgapitosLucas}
	
	EXEC stack. Combinators. Reentrant p1691 'the
	re-entrant interpreter allows for the controlled
	execution of a particular number of instructions per
	time-step.' Reversing a list. Factorial. Fibonacci.
	Parity. Powers of two, integer exponentiation
	Expt(2,n). Sorting a list.",
}

@incollection{Helmuth:2016:GPTP,
	author = {Thomas Helmuth and Lee Spector and Nicholas Freitag McPhee and Saul Shanabrook},
	title = {Plush: Linear Genomes for PushGP},
	booktitle = {Genetic Programming Theory and Practice XIV},
	date = {2016},
	year = {2016},
	NOeditor = {?},
	series = {Genetic and Evolutionary Computation},
	publisher = {Springer},
	pubstate = {In press}
}

@InCollection{Spector:2013:GPTP,
	author =	"Lee Spector and Thomas Helmuth",
	title =	"Uniform Linear Transformation with Repair and
	Alternation in Genetic Programming",
	booktitle =	"Genetic Programming Theory and Practice XI",
	year = 	"2013",
	series =	"Genetic and Evolutionary Computation",
	NOeditor =	"Rick Riolo and Jason H. Moore and Mark Kotanchek",
	publisher =	"Springer",
	chapter =	"8",
	pages =	"137--153",
	address =	"Ann Arbor, USA",
	month =	"9-11 " # may,
	keywords =	"genetic algorithms, genetic programming, Uniform
	mutation, Uniform crossover, ULTRA, Push, PushGP, Drug
	bioavailability problem, Pagie-1 problem, Factorial
	regression, Boolean multiplexer problem",
	isbn13 =	"978-1-4939-0374-0",
	doi =  	"doi:10.1007/978-1-4939-0375-7\_8",
	abstract =	"Several genetic programming researchers have argued
	for the utility of genetic operators that act
	uniformly. By act uniformly we mean two specific
	things: that the probability of an inherited program
	component being modified during inheritance is
	independent of the size and shape of the parent
	programs beyond the component in question; and that
	pairs of parents are combined in ways that allow
	arbitrary combinations of components from each parent
	to appear in the child. Uniform operators described in
	previous work have had limited utility, however,
	because of a mismatch between the relevant notions of
	uniformity and the hierarchical structure and variable
	sizes of many genetic programming representations. In
	this chapter we describe a new genetic operator, ULTRA,
	which incorporates aspects of both mutation and
	crossover and acts approximately uniformly across
	programs of variable sizes and structures. ULTRA treats
	hierarchical programs as linear sequences and includes
	a repair step to ensure that syntax constraints are
	satisfied after variation. We show that on the drug
	bioavailability and Pagie-1 benchmark problems ULTRA
	produces significant improvements both in
	problem-solving power and in program size relative to
	standard operators. Experiments with factorial
	regression and with the Boolean 6-multiplexer problem
	demonstrate that ULTRA can manipulate programs that
	make use of hierarchical structure, but also that it is
	not always beneficial. The demonstrations evolve
	programs in the Push programming language, which makes
	repair particularly simple, but versions of the
	technique should be applicable in other genetic
	programming systems as well.",
	notes =	"http://cscs.umich.edu/gptp-workshops/ Part of
	\cite{Riolo:2013:GPTP} published after the workshop in
	2013",
	doi-url =	"http://dx.doi.org/10.1007/978-1-4939-0375-7\_8",
}